{"ast":null,"code":"var _jsxFileName = \"/Users/sergejgalenko/Documents/GitHub/React-React-Redux-and-Redux-Saga---Master-React-State-Hooks/blackjack/src/components/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Deck from './Deck';\nimport Menu from './Menu';\nimport Result from './Result';\nimport Settings from './Settings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst suits = ['hearts', 'diamonds', 'clubs', 'spades'];\nconst ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '1'];\nconst createDeck = () => {\n  const deck = [];\n  suits.forEach(suit => {\n    ranks.forEach(rank => {\n      deck.push({\n        suit,\n        rank\n      });\n    });\n  });\n  return deck;\n};\nconst getCardValue = card => {\n  if (['11', '12', '13'].includes(card.rank)) {\n    return 10;\n  }\n  if (card.rank === '1') {\n    return 11;\n  }\n  return parseInt(card.rank);\n};\nconst Game = () => {\n  _s();\n  const [deck, setDeck] = useState([]);\n  const [playerHands, setPlayerHands] = useState([[], []]); // Дилер і гравці\n  const [scores, setScores] = useState([0, 0]); // Рахунок дилера і гравців\n  const [gameState, setGameState] = useState('menu'); // 'menu', 'playing', 'result'\n  const [result, setResult] = useState(''); // 'win', 'lose', 'draw'\n  const [balance, setBalance] = useState(1000); // Початковий баланс гравця\n  const [bet, setBet] = useState(100); // Ставка\n  const [players, setPlayers] = useState(1); // Кількість гравців\n  const [wins, setWins] = useState(0); // Кількість перемог\n  const [showSettings, setShowSettings] = useState(false);\n  useEffect(() => {\n    setDeck(createDeck());\n  }, []);\n  const dealCard = (hand, setHand, setScore) => {\n    const newDeck = [...deck];\n    const card = newDeck.pop();\n    const newHand = [...hand, card];\n    setHand(newHand);\n    setScore(newHand.reduce((total, card) => total + getCardValue(card), 0));\n    setDeck(newDeck);\n  };\n  const handleDeal = () => {\n    if (balance < bet) {\n      alert('Недостатньо коштів для цієї ставки!');\n      return;\n    }\n    setBalance(balance - bet);\n    const newPlayerHands = Array(players + 1).fill([]); // Дилер і гравці\n    const newScores = Array(players + 1).fill(0); // Рахунок дилера і гравців\n\n    for (let i = 0; i < 2; i++) {\n      newPlayerHands.forEach((hand, index) => {\n        dealCard(hand, newHand => newPlayerHands[index] = newHand, newScore => newScores[index] = newScore);\n      });\n    }\n    setPlayerHands(newPlayerHands);\n    setScores(newScores);\n    setGameState('playing');\n  };\n  const handleHit = playerIndex => {\n    dealCard(playerHands[playerIndex], hand => {\n      const newPlayerHands = [...playerHands];\n      newPlayerHands[playerIndex] = hand;\n      setPlayerHands(newPlayerHands);\n    }, score => {\n      const newScores = [...scores];\n      newScores[playerIndex] = score;\n      setScores(newScores);\n    });\n    if (scores[playerIndex] > 21) {\n      setResult('lose');\n      setGameState('result');\n    }\n  };\n  const handleStand = playerIndex => {\n    let dealerHand = [...playerHands[0]];\n    let dealerScore = scores[0];\n    while (dealerScore < 17) {\n      const card = deck.pop();\n      dealerHand = [...dealerHand, card];\n      dealerScore = dealerHand.reduce((total, card) => total + getCardValue(card), 0);\n      setPlayerHands([dealerHand, ...playerHands.slice(1)]);\n      setScores([dealerScore, ...scores.slice(1)]);\n    }\n    const playerScore = scores[playerIndex];\n    if (dealerScore > 21 || playerScore > dealerScore) {\n      setResult('win');\n      setBalance(balance + bet * 2);\n      setWins(wins + 1);\n    } else if (playerScore < dealerScore) {\n      setResult('lose');\n    } else {\n      setResult('draw');\n      setBalance(balance + bet);\n    }\n    setGameState('result');\n  };\n  const handleRestart = () => {\n    setDeck(createDeck());\n    setPlayerHands(Array(players + 1).fill([]));\n    setScores(Array(players + 1).fill(0));\n    setResult('');\n    setGameState('menu');\n  };\n  const handleShowSettings = () => {\n    setShowSettings(true);\n  };\n  const handleCloseSettings = () => {\n    setShowSettings(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [gameState === 'menu' && /*#__PURE__*/_jsxDEV(Menu, {\n      onStart: handleDeal,\n      bet: bet,\n      setBet: setBet,\n      players: players,\n      setPlayers: setPlayers,\n      balance: balance,\n      onSettings: handleShowSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0413\\u0440\\u0430 \\u0411\\u043B\\u0435\\u043A\\u0434\\u0436\\u0435\\u043A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), playerHands.slice(1).map((hand, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: index === 0 ? 'Я' : `Гравець ${index + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Deck, {\n          cards: hand\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0420\\u0430\\u0445\\u0443\\u043D\\u043E\\u043A: \", scores[index + 1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleHit(index + 1),\n          children: \"\\u0412\\u0437\\u044F\\u0442\\u0438 \\u043A\\u0430\\u0440\\u0442\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleStand(index + 1),\n          children: \"\\u0417\\u0443\\u043F\\u0438\\u043D\\u0438\\u0442\\u0438\\u0441\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0420\\u0443\\u043A\\u0430 \\u0434\\u0438\\u043B\\u0435\\u0440\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Deck, {\n          cards: playerHands[0].map((card, index) => index === 0 ? card : {\n            suit: 'hidden',\n            rank: 'hidden'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0420\\u0430\\u0445\\u0443\\u043D\\u043E\\u043A: \", scores[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u0411\\u0430\\u043B\\u0430\\u043D\\u0441: \", balance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), gameState === 'result' && /*#__PURE__*/_jsxDEV(Result, {\n      result: result,\n      onRestart: handleRestart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 34\n    }, this), showSettings && /*#__PURE__*/_jsxDEV(Settings, {\n      onClose: handleCloseSettings,\n      players: players,\n      setPlayers: setPlayers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041F\\u0435\\u0440\\u0435\\u043C\\u043E\\u0433\\u0438: \", wins]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"eSQYg3lK3YTi7LQILbXPdnLJKQk=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Deck","Menu","Result","Settings","jsxDEV","_jsxDEV","suits","ranks","createDeck","deck","forEach","suit","rank","push","getCardValue","card","includes","parseInt","Game","_s","setDeck","playerHands","setPlayerHands","scores","setScores","gameState","setGameState","result","setResult","balance","setBalance","bet","setBet","players","setPlayers","wins","setWins","showSettings","setShowSettings","dealCard","hand","setHand","setScore","newDeck","pop","newHand","reduce","total","handleDeal","alert","newPlayerHands","Array","fill","newScores","i","index","newScore","handleHit","playerIndex","score","handleStand","dealerHand","dealerScore","slice","playerScore","handleRestart","handleShowSettings","handleCloseSettings","children","onStart","onSettings","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","alignItems","map","cards","onClick","onRestart","onClose","className","_c","$RefreshReg$"],"sources":["/Users/sergejgalenko/Documents/GitHub/React-React-Redux-and-Redux-Saga---Master-React-State-Hooks/blackjack/src/components/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Deck from './Deck';\nimport Menu from './Menu';\nimport Result from './Result';\nimport Settings from './Settings';\n\nconst suits = ['hearts', 'diamonds', 'clubs', 'spades'];\nconst ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '1'];\n\nconst createDeck = () => {\n  const deck = [];\n  suits.forEach(suit => {\n    ranks.forEach(rank => {\n      deck.push({ suit, rank });\n    });\n  });\n  return deck;\n};\n\nconst getCardValue = (card) => {\n  if (['11', '12', '13'].includes(card.rank)) {\n    return 10;\n  }\n  if (card.rank === '1') {\n    return 11;\n  }\n  return parseInt(card.rank);\n};\n\nconst Game = () => {\n  const [deck, setDeck] = useState([]);\n  const [playerHands, setPlayerHands] = useState([[], []]); // Дилер і гравці\n  const [scores, setScores] = useState([0, 0]); // Рахунок дилера і гравців\n  const [gameState, setGameState] = useState('menu'); // 'menu', 'playing', 'result'\n  const [result, setResult] = useState(''); // 'win', 'lose', 'draw'\n  const [balance, setBalance] = useState(1000); // Початковий баланс гравця\n  const [bet, setBet] = useState(100); // Ставка\n  const [players, setPlayers] = useState(1); // Кількість гравців\n  const [wins, setWins] = useState(0); // Кількість перемог\n  const [showSettings, setShowSettings] = useState(false);\n\n  useEffect(() => {\n    setDeck(createDeck());\n  }, []);\n\n  const dealCard = (hand, setHand, setScore) => {\n    const newDeck = [...deck];\n    const card = newDeck.pop();\n    const newHand = [...hand, card];\n    setHand(newHand);\n    setScore(newHand.reduce((total, card) => total + getCardValue(card), 0));\n    setDeck(newDeck);\n  };\n\n  const handleDeal = () => {\n    if (balance < bet) {\n      alert('Недостатньо коштів для цієї ставки!');\n      return;\n    }\n    setBalance(balance - bet);\n\n    const newPlayerHands = Array(players + 1).fill([]); // Дилер і гравці\n    const newScores = Array(players + 1).fill(0); // Рахунок дилера і гравців\n\n    for (let i = 0; i < 2; i++) {\n      newPlayerHands.forEach((hand, index) => {\n        dealCard(hand, (newHand) => newPlayerHands[index] = newHand, (newScore) => newScores[index] = newScore);\n      });\n    }\n\n    setPlayerHands(newPlayerHands);\n    setScores(newScores);\n    setGameState('playing');\n  };\n\n  const handleHit = (playerIndex) => {\n    dealCard(playerHands[playerIndex], (hand) => {\n      const newPlayerHands = [...playerHands];\n      newPlayerHands[playerIndex] = hand;\n      setPlayerHands(newPlayerHands);\n    }, (score) => {\n      const newScores = [...scores];\n      newScores[playerIndex] = score;\n      setScores(newScores);\n    });\n\n    if (scores[playerIndex] > 21) {\n      setResult('lose');\n      setGameState('result');\n    }\n  };\n\n  const handleStand = (playerIndex) => {\n    let dealerHand = [...playerHands[0]];\n    let dealerScore = scores[0];\n\n    while (dealerScore < 17) {\n      const card = deck.pop();\n      dealerHand = [...dealerHand, card];\n      dealerScore = dealerHand.reduce((total, card) => total + getCardValue(card), 0);\n      setPlayerHands([dealerHand, ...playerHands.slice(1)]);\n      setScores([dealerScore, ...scores.slice(1)]);\n    }\n\n    const playerScore = scores[playerIndex];\n\n    if (dealerScore > 21 || playerScore > dealerScore) {\n      setResult('win');\n      setBalance(balance + bet * 2);\n      setWins(wins + 1);\n    } else if (playerScore < dealerScore) {\n      setResult('lose');\n    } else {\n      setResult('draw');\n      setBalance(balance + bet);\n    }\n\n    setGameState('result');\n  };\n\n  const handleRestart = () => {\n    setDeck(createDeck());\n    setPlayerHands(Array(players + 1).fill([]));\n    setScores(Array(players + 1).fill(0));\n    setResult('');\n    setGameState('menu');\n  };\n\n  const handleShowSettings = () => {\n    setShowSettings(true);\n  };\n\n  const handleCloseSettings = () => {\n    setShowSettings(false);\n  };\n\n  return (\n    <div>\n      {gameState === 'menu' && (\n        <Menu\n          onStart={handleDeal}\n          bet={bet}\n          setBet={setBet}\n          players={players}\n          setPlayers={setPlayers}\n          balance={balance}\n          onSettings={handleShowSettings}\n        />\n      )}\n      {gameState === 'playing' && (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n          <h1>Гра Блекджек</h1>\n          {playerHands.slice(1).map((hand, index) => (\n            <div key={index} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <h2>{index === 0 ? 'Я' : `Гравець ${index + 1}`}</h2>\n              <Deck cards={hand} />\n              <p>Рахунок: {scores[index + 1]}</p>\n              <button onClick={() => handleHit(index + 1)}>Взяти карту</button>\n              <button onClick={() => handleStand(index + 1)}>Зупинитися</button>\n            </div>\n          ))}\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            <h2>Рука дилера</h2>\n            <Deck cards={playerHands[0].map((card, index) => (index === 0 ? card : { suit: 'hidden', rank: 'hidden' }))} />\n            <p>Рахунок: {scores[0]}</p>\n          </div>\n          <p>Баланс: {balance}</p>\n        </div>\n      )}\n      {gameState === 'result' && <Result result={result} onRestart={handleRestart} />}\n      {showSettings && <Settings onClose={handleCloseSettings} players={players} setPlayers={setPlayers} />}\n      <div className=\"stats\">\n        <p>Перемоги: {wins}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}